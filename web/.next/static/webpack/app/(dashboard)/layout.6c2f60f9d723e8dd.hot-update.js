"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(dashboard)/layout",{

/***/ "(app-pages-browser)/./lib/services/guilds.ts":
/*!********************************!*\
  !*** ./lib/services/guilds.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchDashboard: () => (/* binding */ fetchDashboard),\n/* harmony export */   fetchGuilds: () => (/* binding */ fetchGuilds)\n/* harmony export */ });\n/* harmony import */ var _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabase-client */ \"(app-pages-browser)/./lib/supabase-client.ts\");\n\nasync function getGuildMemberCount(guildId) {\n    const { count } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"members\").select(\"id\", {\n        count: \"exact\",\n        head: true\n    }).eq(\"guild_id\", guildId).eq(\"is_active\", true);\n    return count !== null && count !== void 0 ? count : 0;\n}\nasync function getGuildBalance(guildId) {\n    const { data, error } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.rpc(\"guild_current_balance\", {\n        p_guild_id: guildId\n    });\n    if (error) {\n        console.warn(\"Failed to fetch guild balance\", error);\n        return 0;\n    }\n    return Number(data !== null && data !== void 0 ? data : 0);\n}\nasync function fetchGuilds() {\n    const { data, error } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"guild_user_roles\").select(\"guild_id, role, guild:guild_id ( id, name, tag )\").order(\"created_at\", {\n        ascending: true\n    });\n    if (error) {\n        throw error;\n    }\n    if (!data) {\n        return [];\n    }\n    const enriched = await Promise.all(data.map(async (row)=>{\n        var _row_guild, _row_guild1;\n        const memberCount = await getGuildMemberCount(row.guild_id);\n        const balance = await getGuildBalance(row.guild_id);\n        var _row_guild_name, _row_guild_tag;\n        return {\n            id: row.guild_id,\n            name: (_row_guild_name = (_row_guild = row.guild) === null || _row_guild === void 0 ? void 0 : _row_guild.name) !== null && _row_guild_name !== void 0 ? _row_guild_name : \"Unknown Guild\",\n            tag: (_row_guild_tag = (_row_guild1 = row.guild) === null || _row_guild1 === void 0 ? void 0 : _row_guild1.tag) !== null && _row_guild_tag !== void 0 ? _row_guild_tag : \"\",\n            balance,\n            member_count: memberCount,\n            role: row.role\n        };\n    }));\n    return enriched;\n}\nasync function fetchDashboard(guildId) {\n    var _guilds_, _transactionsThisMonth_data, _transactionsThisMonth_data1, _monthlySummary_data, _recentTransactions_data, _recentLoot_data, _auditLogs_data;\n    const guilds = await fetchGuilds();\n    const activeGuildId = guildId !== null && guildId !== void 0 ? guildId : (_guilds_ = guilds[0]) === null || _guilds_ === void 0 ? void 0 : _guilds_.id;\n    if (!activeGuildId) {\n        return {\n            guilds,\n            activeGuildId: undefined,\n            kpis: {\n                active_members: 0,\n                guild_balance: 0,\n                income_month: 0,\n                expense_month: 0\n            },\n            recentTransactions: [],\n            recentLoot: [],\n            monthlySeries: [],\n            audit: []\n        };\n    }\n    const startOfMonth = new Date(new Date().getFullYear(), new Date().getMonth(), 1);\n    const endOfMonth = new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0, 23, 59, 59);\n    const [memberCount, guildBalance, transactionsThisMonth, monthlySummary, recentTransactions, recentLoot, auditLogs] = await Promise.all([\n        getGuildMemberCount(activeGuildId),\n        getGuildBalance(activeGuildId),\n        _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"transactions\").select(\"tx_type, amount\").eq(\"guild_id\", activeGuildId).eq(\"confirmed\", true).gte(\"created_at\", startOfMonth.toISOString()).lte(\"created_at\", endOfMonth.toISOString()),\n        _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"vw_monthly_summary\").select(\"year, month, income_total, expense_total\").eq(\"guild_id\", activeGuildId).order(\"year\", {\n            ascending: true\n        }).order(\"month\", {\n            ascending: true\n        }),\n        _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"transactions\").select(\"id, guild_id, created_at, tx_type, category, amount, description, confirmed, confirmed_at, created_by, evidence_path, profiles:profiles!transactions_created_by_fkey(display_name,email)\").eq(\"guild_id\", activeGuildId).order(\"created_at\", {\n            ascending: false\n        }).limit(8),\n        _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"loot_records\").select(\"id, guild_id, created_at, boss_name, item_name, item_rarity, estimated_value, distributed, distributed_at, notes\").eq(\"guild_id\", activeGuildId).order(\"created_at\", {\n            ascending: false\n        }).limit(8),\n        _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"audit_logs\").select(\"id, guild_id, user_id, action, payload, created_at, profiles:profiles!audit_logs_user_id_fkey(display_name,email)\").eq(\"guild_id\", activeGuildId).order(\"created_at\", {\n            ascending: false\n        }).limit(10)\n    ]);\n    var _transactionsThisMonth_data_reduce, _transactionsThisMonth_data_reduce1;\n    const kpis = {\n        active_members: memberCount,\n        guild_balance: guildBalance,\n        income_month: (_transactionsThisMonth_data_reduce = (_transactionsThisMonth_data = transactionsThisMonth.data) === null || _transactionsThisMonth_data === void 0 ? void 0 : _transactionsThisMonth_data.reduce((sum, tx)=>{\n            var _tx_amount;\n            return tx.tx_type === \"income\" ? sum + Number((_tx_amount = tx.amount) !== null && _tx_amount !== void 0 ? _tx_amount : 0) : sum;\n        }, 0)) !== null && _transactionsThisMonth_data_reduce !== void 0 ? _transactionsThisMonth_data_reduce : 0,\n        expense_month: (_transactionsThisMonth_data_reduce1 = (_transactionsThisMonth_data1 = transactionsThisMonth.data) === null || _transactionsThisMonth_data1 === void 0 ? void 0 : _transactionsThisMonth_data1.reduce((sum, tx)=>{\n            var _tx_amount;\n            return tx.tx_type === \"expense\" ? sum + Number((_tx_amount = tx.amount) !== null && _tx_amount !== void 0 ? _tx_amount : 0) : sum;\n        }, 0)) !== null && _transactionsThisMonth_data_reduce1 !== void 0 ? _transactionsThisMonth_data_reduce1 : 0\n    };\n    var _monthlySummary_data_map;\n    const monthlySeries = (_monthlySummary_data_map = (_monthlySummary_data = monthlySummary.data) === null || _monthlySummary_data === void 0 ? void 0 : _monthlySummary_data.map((row)=>{\n        var _row_income_total, _row_expense_total;\n        return {\n            month: \"\".concat(row.year, \"-\").concat(String(row.month).padStart(2, \"0\")),\n            income: Number((_row_income_total = row.income_total) !== null && _row_income_total !== void 0 ? _row_income_total : 0),\n            expense: Number((_row_expense_total = row.expense_total) !== null && _row_expense_total !== void 0 ? _row_expense_total : 0)\n        };\n    })) !== null && _monthlySummary_data_map !== void 0 ? _monthlySummary_data_map : [];\n    var _recentTransactions_data_map;\n    const transactions = (_recentTransactions_data_map = (_recentTransactions_data = recentTransactions.data) === null || _recentTransactions_data === void 0 ? void 0 : _recentTransactions_data.map((tx)=>{\n        var _tx_profiles, _tx_profiles1;\n        var _tx_amount, _tx_profiles_display_name, _ref, _ref1, _tx_evidence_path;\n        return {\n            id: tx.id,\n            guild_id: tx.guild_id,\n            created_at: tx.created_at,\n            tx_type: tx.tx_type,\n            category: tx.category,\n            amount: Number((_tx_amount = tx.amount) !== null && _tx_amount !== void 0 ? _tx_amount : 0),\n            description: tx.description,\n            confirmed: tx.confirmed,\n            confirmed_at: tx.confirmed_at,\n            created_by: tx.created_by,\n            created_by_name: (_ref1 = (_ref = (_tx_profiles_display_name = (_tx_profiles = tx.profiles) === null || _tx_profiles === void 0 ? void 0 : _tx_profiles.display_name) !== null && _tx_profiles_display_name !== void 0 ? _tx_profiles_display_name : (_tx_profiles1 = tx.profiles) === null || _tx_profiles1 === void 0 ? void 0 : _tx_profiles1.email) !== null && _ref !== void 0 ? _ref : tx.created_by) !== null && _ref1 !== void 0 ? _ref1 : \"Unknown\",\n            evidence_path: (_tx_evidence_path = tx.evidence_path) !== null && _tx_evidence_path !== void 0 ? _tx_evidence_path : undefined\n        };\n    })) !== null && _recentTransactions_data_map !== void 0 ? _recentTransactions_data_map : [];\n    var _recentLoot_data_map;\n    const loot = (_recentLoot_data_map = (_recentLoot_data = recentLoot.data) === null || _recentLoot_data === void 0 ? void 0 : _recentLoot_data.map((row)=>{\n        var _row_boss_name, _row_item_name, _row_estimated_value, _row_distributed_at, _row_notes;\n        return {\n            id: row.id,\n            guild_id: row.guild_id,\n            created_at: row.created_at,\n            boss_name: (_row_boss_name = row.boss_name) !== null && _row_boss_name !== void 0 ? _row_boss_name : \"\",\n            item_name: (_row_item_name = row.item_name) !== null && _row_item_name !== void 0 ? _row_item_name : \"\",\n            item_rarity: row.item_rarity,\n            estimated_value: Number((_row_estimated_value = row.estimated_value) !== null && _row_estimated_value !== void 0 ? _row_estimated_value : 0),\n            distributed: row.distributed,\n            distributed_at: (_row_distributed_at = row.distributed_at) !== null && _row_distributed_at !== void 0 ? _row_distributed_at : undefined,\n            notes: (_row_notes = row.notes) !== null && _row_notes !== void 0 ? _row_notes : undefined\n        };\n    })) !== null && _recentLoot_data_map !== void 0 ? _recentLoot_data_map : [];\n    var _auditLogs_data_map;\n    const audit = (_auditLogs_data_map = (_auditLogs_data = auditLogs.data) === null || _auditLogs_data === void 0 ? void 0 : _auditLogs_data.map((log)=>{\n        var _log_profiles, _log_profiles1;\n        var _log_user_id, _log_payload, _log_profiles_display_name;\n        return {\n            id: log.id,\n            guild_id: log.guild_id,\n            user_id: (_log_user_id = log.user_id) !== null && _log_user_id !== void 0 ? _log_user_id : undefined,\n            action: log.action,\n            payload: (_log_payload = log.payload) !== null && _log_payload !== void 0 ? _log_payload : {},\n            created_at: log.created_at,\n            user_name: (_log_profiles_display_name = (_log_profiles = log.profiles) === null || _log_profiles === void 0 ? void 0 : _log_profiles.display_name) !== null && _log_profiles_display_name !== void 0 ? _log_profiles_display_name : (_log_profiles1 = log.profiles) === null || _log_profiles1 === void 0 ? void 0 : _log_profiles1.email\n        };\n    })) !== null && _auditLogs_data_map !== void 0 ? _auditLogs_data_map : [];\n    return {\n        guilds,\n        activeGuildId,\n        kpis,\n        recentTransactions: transactions,\n        recentLoot: loot,\n        monthlySeries,\n        audit\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/services/guilds.ts\n"));

/***/ })

});